"use strict";const i=require("axios"),p=require("pvtables/notify"),u=(o,a=1e4)=>{const t=i.create({baseURL:`/api/${o}`,timeout:a}),{notify:r}=p.useNotifications();return t.interceptors.request.use(e=>e,e=>{r("error",{detail:e.message}),Promise.reject(e)}),t.interceptors.response.use(({data:e})=>{if(!e.success)throw new Error(e.message);return e},({message:e,response:s})=>{r("error",{detail:e})}),{create:async(e=null,s={})=>await t.put("/",e,{params:s}),get:async e=>{let s={limit:1,setTotal:0,filters:{id:{value:e,matchMode:"equals"}}};const n=await t.get("/",{params:s});if(n.data.rows.length==1)return n.data.rows[0];throw new Error(n.message)},read:async(e={})=>await t.get("/",{params:e}),update:async(e=null,s={})=>await t.patch("/",e,s),delete:async(e={})=>await t.delete("/",{params:e}),options:async(e=null,s={})=>{const n={api_action:"options",...s};return await t.post("/",e,{params:n})},autocomplete:async(e={})=>{const s={api_action:"autocomplete",...e};return await t.post("/",null,{params:s})},action:async(e,s={})=>{const n={api_action:e,...s};return await t.post("/",null,{params:n})}}};module.exports=u;
